import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import requests


def fetch_data(symbol, start_date, end_date):
    url = f"https://msh-appdata.cafef.vn/rest-api/api/v1/TradingViewsData?symbol={symbol}&type=D1"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'X-Requested-With': 'XMLHttpRequest',
    }

    # S·ª≠ d·ª•ng datetime ƒë·ªÉ l·∫•y ng√†y hi·ªán t·∫°i
    params = {
        'symbol': symbol,
        'type': 'D1'
    }

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        data = response.json()

        if data.get("succeeded", False) and "data" in data and "value" in data["data"]:
            data_infor = data["data"]["value"]["dataInfor"]

            if isinstance(data_infor, list):
                df = pd.DataFrame(data_infor)
                df['date'] = pd.to_datetime(df['time'], unit='s')
                df = df.drop(columns=['time'])

                # L·ªçc d·ªØ li·ªáu ch·ªâ ƒë·∫øn th·ªùi gian hi·ªán t·∫°i
                df = df[df['date'] <= datetime.now()]
                return df
            else:
                print("D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!")
                return pd.DataFrame()
        else:
            print("L·ªói t·ª´ API ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
            return pd.DataFrame()
    else:
        print(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API. M√£ l·ªói: {response.status_code}")
        return pd.DataFrame()


def get_full_data(symbol):
    # L·∫•y d·ªØ li·ªáu trong v√≤ng 1 nƒÉm tr·ªü l·∫°i (ho·∫∑c m·ªôt kho·∫£ng th·ªùi gian c·ª• th·ªÉ)
    full_data = pd.DataFrame()
    end_date = datetime.today()  # Ng√†y hi·ªán t·∫°i
    start_date = end_date - timedelta(days=365)  # 365 ng√†y tr∆∞·ªõc (1 nƒÉm)

    df = fetch_data(symbol, start_date, end_date)

    # Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
    if not df.empty:
        full_data = pd.concat([full_data, df], ignore_index=True)

    return full_data


# Streamlit Dashboard Code
st.title('üìà Dashboard gi√° c·ªï phi·∫øu')

# Danh s√°ch c·ªï phi·∫øu c√≥ s·∫µn (C√≥ th·ªÉ m·ªü r·ªông ho·∫∑c l·∫•y t·ª´ API n·∫øu c√≥)
stock_symbols = [
    'AAA', 'AAM', 'AAT', 'ABR', 'ABS', 'ABT', 'ACB', 'ACC', 'ACG', 'ACL',
    'ADG', 'ADP', 'ADS', 'AGG', 'AGR', 'ANV', 'APG', 'APH', 'ASG', 'ASM',
    'ASP', 'AST', 'BAF', 'BBC', 'BCE', 'BCG', 'BCM', 'BFC', 'BHN', 'BIC',
    'BID', 'BKG', 'BMC', 'BMI', 'BMP', 'BRC', 'BSI', 'BSR', 'BTP', 'BTT',
    'BVH', 'BWE', 'C32', 'C47', 'CACB2502', 'CACB2503', 'CACB2505', 'CACB2507',
    'CACB2508', 'CACB2509', 'CACB2510', 'CACB2511', 'CCC', 'CCL', 'CDC',
    'CFPT2404', 'CFPT2502', 'CFPT2503', 'CFPT2505', 'CFPT2508', 'CFPT2509',
    'CFPT2511', 'CFPT2512', 'CFPT2513', 'CFPT2514', 'CFPT2515', 'CFPT2516',
    'CFPT2517', 'CFPT2518', 'CFPT2519', 'CFPT2520', 'CFPT2521', 'CHDB2504',
    'CHDB2505', 'CHP', 'CHPG2406', 'CHPG2409', 'CHPG2502', 'CHPG2504',
    'CHPG2505', 'CHPG2506', 'CHPG2508', 'CHPG2510', 'CHPG2513', 'CHPG2514',
    'CHPG2515', 'CHPG2516', 'CHPG2517', 'CHPG2518', 'CHPG2519', 'CHPG2520',
    'CHPG2521', 'CHPG2522', 'CHPG2523', 'CHPG2524', 'CHPG2525', 'CHPG2526',
    'CHPG2527', 'CHPG2528', 'CHPG2529', 'CHPG2531', 'CHPG2532', 'CIG', 'CII',
    'CKG', 'CLC', 'CLL', 'CLPB2501', 'CLPB2502', 'CLPB2503', 'CLPB2504',
    'CLPB2508', 'CLW', 'CMBB2407', 'CMBB2503', 'CMBB2504', 'CMBB2505',
    'CMBB2507', 'CMBB2509', 'CMBB2510', 'CMBB2511', 'CMBB2512', 'CMBB2513',
    'CMBB2514', 'CMBB2515', 'CMBB2516', 'CMBB2517', 'CMBB2518', 'CMG',
    'CMSN2406', 'CMSN2503', 'CMSN2507', 'CMSN2508', 'CMSN2509', 'CMSN2510',
    'CMSN2511', 'CMSN2512', 'CMSN2513', 'CMSN2514', 'CMSN2515', 'CMSN2516',
    'CMSN2517', 'CMSN2518', 'CMV', 'CMWG2407', 'CMWG2503', 'CMWG2504',
    'CMWG2505', 'CMWG2507', 'CMWG2508', 'CMWG2509', 'CMWG2510', 'CMWG2511',
    'CMWG2512', 'CMWG2513', 'CMWG2514', 'CMWG2515', 'CMWG2516', 'CMWG2517',
    'CMX', 'CNG', 'COM', 'CRC', 'CRE', 'CSHB2504', 'CSHB2505', 'CSHB2506',
    'CSHB2507', 'CSHB2508', 'CSHB2509', 'CSHB2510', 'CSM', 'CSSB2503',
    'CSSB2504', 'CSSB2505', 'CSSB2506', 'CSSB2507', 'CSSB2508', 'CSTB2410',
    'CSTB2502', 'CSTB2504', 'CSTB2505', 'CSTB2509', 'CSTB2512', 'CSTB2513',
    'CSTB2514', 'CSTB2515', 'CSTB2516', 'CSTB2517', 'CSTB2518', 'CSTB2519',
    'CSTB2520', 'CSTB2521', 'CSTB2522', 'CSTB2523', 'CSTB2525', 'CSV',
    'CTCB2403', 'CTCB2503', 'CTCB2504', 'CTCB2506', 'CTCB2507', 'CTCB2508',
    'CTCB2509', 'CTCB2510', 'CTCB2511', 'CTCB2512', 'CTCB2513', 'CTD', 'CTF',
    'CTG', 'CTI', 'CTPB2502', 'CTPB2503', 'CTPB2504', 'CTPB2505', 'CTPB2506',
    'CTR', 'CTS', 'CVHM2502', 'CVHM2503', 'CVHM2511', 'CVHM2512', 'CVHM2513',
    'CVHM2514', 'CVHM2515', 'CVHM2516', 'CVHM2517', 'CVHM2518', 'CVHM2519',
    'CVHM2520', 'CVIB2407', 'CVIB2502', 'CVIB2504', 'CVIB2505', 'CVIB2506',
    'CVIB2507', 'CVIB2508', 'CVIB2509', 'CVIB2510', 'CVIC2502', 'CVIC2509',
    'CVIC2510', 'CVIC2511', 'CVJC2504', 'CVJC2505', 'CVNM2407', 'CVNM2502',
    'CVNM2503', 'CVNM2504', 'CVNM2508', 'CVNM2509', 'CVNM2510', 'CVNM2511',
    'CVNM2512', 'CVNM2513', 'CVNM2514', 'CVNM2515', 'CVNM2516', 'CVNM2517',
    'CVNM2518', 'CVNM2519', 'CVNM2520', 'CVPB2409', 'CVPB2501', 'CVPB2502',
    'CVPB2504', 'CVPB2506', 'CVPB2509', 'CVPB2510', 'CVPB2511', 'CVPB2512',
    'CVPB2513', 'CVPB2514', 'CVPB2515', 'CVPB2516', 'CVPB2517', 'CVPB2519',
    'CVPB2520', 'CVPB2522', 'CVRE2407', 'CVRE2503', 'CVRE2510', 'CVRE2512',
    'CVRE2513', 'CVRE2514', 'CVRE2516', 'CVRE2518', 'CVRE2519', 'CVRE2520',
    'D2D', 'DAH', 'DAT', 'DBC', 'DBD', 'DBT', 'DC4', 'DCL', 'DCM', 'DGC',
    'DGW', 'DHA', 'DHC', 'DHG', 'DHM', 'DIG', 'DLG', 'DMC', 'DPG', 'DPM',
    'DPR', 'DQC', 'DRC', 'DRH', 'DRL', 'DSC', 'DSE', 'DSN', 'DTA', 'DTL',
    'DTT', 'DVP', 'DXG', 'DXS', 'DXV', 'E1VFVN30', 'EIB', 'ELC', 'EVE',
    'EVF', 'EVG', 'FCM', 'FCN', 'FIR', 'FIT', 'FMC', 'FPT', 'FRT', 'FTS',
    'FUCVREIT', 'FUEDCMID', 'FUEFCV50', 'FUEIP100', 'FUEKIV30', 'FUEKIVFS',
    'FUEKIVND', 'FUEMAV30', 'FUEMAVND', 'FUESSV30', 'FUESSV50', 'FUESSVFL',
    'FUETCC50', 'FUEVFVND', 'FUEVN100', 'GAS', 'GDT', 'GEE', 'GEG', 'GEX',
    'GIL', 'GMD', 'GMH', 'GSP', 'GTA', 'GVR', 'HAG', 'HAH', 'HAP', 'HAR',
    'HAX', 'HCD', 'HCM', 'HDB', 'HDC', 'HDG', 'HHP', 'HHS', 'HHV', 'HID',
    'HII', 'HMC', 'HNA', 'HPG', 'HPX', 'HQC', 'HSG', 'HSL', 'HT1', 'HTG',
    'HTI', 'HTL', 'HTN', 'HTV', 'HU1', 'HUB', 'HVH', 'HVN', 'HVX', 'ICT',
    'IDI', 'IJC', 'ILB', 'IMP', 'ITC', 'ITD', 'JVC', 'KBC', 'KDC', 'KDH',
    'KHG', 'KHP', 'KMR', 'KOS', 'KSB', 'L10', 'LAF', 'LBM', 'LCG', 'LDG',
    'LGL', 'LHG', 'LIX', 'LPB', 'LSS', 'MBB', 'MCM', 'MCP', 'MHC', 'MIG',
    'MSB', 'MSH', 'MSN', 'MWG', 'NAB', 'NAF', 'NAV', 'NBB', 'NCT', 'NHA',
    'NHH', 'NKG', 'NLG', 'NNC', 'NO1', 'NSC', 'NT2', 'NTL', 'NVL', 'NVT',
    'OCB', 'OGC', 'OPC', 'ORS', 'PAC', 'PAN', 'PC1', 'PDN', 'PDR', 'PET',
    'PGC', 'PGD', 'PGI', 'PGV', 'PHC', 'PHR', 'PIT', 'PJT', 'PLP', 'PLX',
    'PMG', 'PNC', 'PNJ', 'POW', 'PPC', 'PTB', 'PTC', 'PTL', 'PVD', 'PVP',
    'PVT', 'QCG', 'QNP', 'RAL', 'REE', 'RYG', 'SAB', 'SAM', 'SAV', 'SBA',
    'SBG', 'SBT', 'SBV', 'SC5', 'SCR', 'SCS', 'SFG', 'SFI', 'SGN', 'SGR',
    'SGT', 'SHA', 'SHB', 'SHI', 'SHP', 'SIP', 'SJD', 'SJS', 'SKG', 'SMA',
    'SMB', 'SMC', 'SPM', 'SRC', 'SRF', 'SSB', 'SSI', 'ST8', 'STB', 'STK',
    'SVC', 'SVD', 'SVI', 'SVT', 'SZC', 'SZL', 'TAL', 'TCB', 'TCD', 'TCH',
    'TCI', 'TCL', 'TCM', 'TCO', 'TCR', 'TCT', 'TDC', 'TDG', 'TDH', 'TDM',
    'TDP', 'TDW', 'TEG', 'THG', 'TIP', 'TIX', 'TLD', 'TLG', 'TLH', 'TMP',
    'TMS', 'TMT', 'TN1', 'TNC', 'TNH', 'TNI', 'TNT', 'TPB', 'TPC', 'TRA',
    'TRC', 'TSC', 'TTA', 'TTF', 'TV2', 'TVB', 'TVS', 'TVT', 'TYA', 'UIC',
    'VAB', 'VCA', 'VCB', 'VCF', 'VCG', 'VCI', 'VDP', 'VDS', 'VFG', 'VGC',
    'VHC', 'VHM', 'VIB', 'VIC', 'VID', 'VIP', 'VIX', 'VJC', 'VMD', 'VND',
    'VNE', 'VNG', 'VNL', 'VNM', 'VNS', 'VOS', 'VPB', 'VPD', 'VPG', 'VPH',
    'VPI', 'VPL', 'VPS', 'VRC', 'VRE', 'VSC', 'VSH', 'VTB', 'VTO', 'VTP',
    'YBM', 'YEG'
]

# T·∫°o Dropdown ƒë·ªÉ ch·ªçn c·ªï phi·∫øu
symbol = st.selectbox('Ch·ªçn m√£ c·ªï phi·∫øu:', stock_symbols)

# L·∫•y d·ªØ li·ªáu cho c·ªï phi·∫øu ƒë∆∞·ª£c ch·ªçn
if symbol:
    st.write(f"ƒêang l·∫•y d·ªØ li·ªáu cho c·ªï phi·∫øu {symbol}...")
    df = get_full_data(symbol)

    if not df.empty:
        # Hi·ªÉn th·ªã d·ªØ li·ªáu ·ªü d·∫°ng b·∫£ng
        st.write(f"Hi·ªÉn th·ªã d·ªØ li·ªáu cho c·ªï phi·∫øu {symbol}:")
        st.dataframe(df)

        # V·∫Ω bi·ªÉu ƒë·ªì gi√° c·ªï phi·∫øu
        fig = px.line(df, x='date', y='close', title=f"Bi·ªÉu ƒë·ªì gi√° c·ªï phi·∫øu {symbol}")
        st.plotly_chart(fig)

    else:
        st.write("Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c c√≥ l·ªói khi l·∫•y d·ªØ li·ªáu!")

# C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª± ƒë·ªông m·ªói ng√†y
st.write('D·ªØ li·ªáu s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói ng√†y!')
