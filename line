import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import requests

def fetch_data(symbol):
    url = f"https://msh-appdata.cafef.vn/rest-api/api/v1/TradingViewsData?symbol={symbol}&type=D1"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'X-Requested-With': 'XMLHttpRequest',
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        if data.get("succeeded", False) and "data" in data and "value" in data["data"]:
            data_infor = data["data"]["value"]["dataInfor"]
            if isinstance(data_infor, list) and len(data_infor) > 0:
                df = pd.DataFrame(data_infor)

                # Chuy·ªÉn time t·ª´ float sang int r·ªìi sang datetime
                if 'time' in df.columns:
                    df['date'] = pd.to_datetime(df['time'].astype(int), unit='s')
                    df = df.drop(columns=['time'])
                else:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt time trong d·ªØ li·ªáu API!")
                    return pd.DataFrame()

                df = df[df['date'] <= datetime.now()]
                return df
            else:
                st.error("D·ªØ li·ªáu API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!")
                return pd.DataFrame()
        else:
            st.error("API tr·∫£ v·ªÅ l·ªói ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
            return pd.DataFrame()
    else:
        st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API. M√£ l·ªói: {response.status_code}")
        return pd.DataFrame()

def get_start_date_from_tf(tf, df):
    today = datetime.now()
    if tf == "1D":
        return today - relativedelta(days=1)
    elif tf == "5D":
        return today - relativedelta(days=5)
    elif tf == "1M":
        return today - relativedelta(months=1)
    elif tf == "3M":
        return today - relativedelta(months=3)
    elif tf == "6M":
        return today - relativedelta(months=6)
    elif tf == "YTD":  # t·ª´ ƒë·∫ßu nƒÉm
        return datetime(today.year, 1, 1)
    elif tf == "1Y":
        return today - relativedelta(years=1)
    elif tf == "ALL":
        return df['date'].min()
    else:
        return df['date'].min()

# Streamlit Dashboard Code
st.set_page_config(page_title="Stock Dashboard", page_icon="üìà", layout="wide")
st.title('üìà Dashboard gi√° c·ªï phi·∫øu')

# Danh s√°ch c·ªï phi·∫øu c√≥ s·∫µn (C√≥ th·ªÉ m·ªü r·ªông ho·∫∑c l·∫•y t·ª´ API n·∫øu c√≥)
stock_symbols = [
    'AAA', 'AAM', 'AAT', 'ABR', 'ABS', 'ABT', 'ACB', 'ACC', 'ACG', 'ACL', #... (list of stocks)
]

# T·∫°o Dropdown ƒë·ªÉ ch·ªçn c·ªï phi·∫øu
symbol = st.selectbox('Ch·ªçn m√£ c·ªï phi·∫øu:', stock_symbols)

chart_type = st.radio("Ch·ªçn ki·ªÉu bi·ªÉu ƒë·ªì:", ("ƒê∆∞·ªùng", "N·∫øn"))

# Ch·ªçn khung th·ªùi gian
time_frames = ["1D", "5D", "1M", "3M", "6M", "YTD", "1Y", "3Y", "All"]
time_frame = st.radio("Ch·ªçn kho·∫£ng th·ªùi gian:", time_frames, horizontal=True)

if symbol:
    st.info(f"ƒêang l·∫•y d·ªØ li·ªáu cho c·ªï phi·∫øu {symbol}...")
    df = fetch_data(symbol)

    if df.empty:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c l·ªói khi l·∫•y d·ªØ li·ªáu!")
    else:
        # --- 1. L·ªçc d·ªØ li·ªáu theo khung th·ªùi gian (df_filtered) ---
        start_date = get_start_date_from_tf(time_frame, df)
        df_filtered = df[df['date'] >= start_date].reset_index(drop=True)

        if df_filtered.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
        else:
            # --- 2. Chu·∫©n b·ªã D·ªØ li·ªáu Tooltip (Customdata) D√ôNG D·ªÆ LI·ªÜU CHI TI·∫æT ---
            # Ch·ªâ s·ª≠ d·ª•ng df_filtered ƒë·ªÉ ƒë·∫£m b·∫£o customdata kh·ªõp v·ªõi bi·ªÉu ƒë·ªì
            df_tooltip = df_filtered[['date', 'open', 'high', 'low', 'close', 'volume']].copy()
            df_tooltip['date_str'] = df_tooltip['date'].dt.strftime('%d/%m/%Y')
            df_tooltip['volume_str'] = df_tooltip['volume'].apply(lambda x: f"{x:,.0f}").str.replace(',', '.')

            custom_data = df_tooltip[['date_str', 'open', 'high', 'low', 'close', 'volume_str']].values

            # ƒê·ªãnh nghƒ©a Tooltip Template
            df_filtered["Point_Change"] = df_filtered["close"].diff()
            df_filtered["Pct_Change"] = df_filtered["close"].pct_change() * 100

            hover_text = []
            for i, row in df_filtered.iterrows():
                if pd.isna(row["Point_Change"]):
                    hover_text.append(
                        f"<b>{symbol}</b><br>"
                        f"Gi√°: {row['close']:.2f}<br>"
                        f"{row['date'].strftime('%d/%m/%Y')}"
                    )
                else:
                    sign = "+" if row["Point_Change"] >= 0 else "-"
                    color = "green" if row["Point_Change"] >= 0 else "red"
                    hover_text.append(
                        f"<b>{symbol}</b><br>"
                        f"Gi√°: {row['close']:.2f}<br>"
                        f"<span style='color:{color}'>{sign}{abs(row['Point_Change']):.2f} "
                        f"({sign}{abs(row['Pct_Change']):.2f}%)</span><br>"
                        f"{row['date'].strftime('%d/%m/%Y')}"
                    )

            # Ki·ªÉm tra gi√° c·ªßa ng√†y ƒë·∫ßu v√† ng√†y cu·ªëi
            if df_filtered['close'].iloc[0] < df_filtered['close'].iloc[-1]:
                line_color = 'green'  # M√†u xanh n·∫øu gi√° cu·ªëi > gi√° ƒë·∫ßu
            else:
                line_color = 'red'  # M√†u ƒë·ªè n·∫øu gi√° cu·ªëi < gi√° ƒë·∫ßu

            # C·ªë ƒë·ªãnh tr·ª•c y
            y_min = df_filtered['low'].min()
            y_max = df_filtered['high'].max()


            # --- 3. V·∫º BI·ªÇU ƒê·ªí N·∫æN (CANDLESTICK) ---
            if chart_type == "N·∫øn":
                fig = go.Figure()

                # Th√™m bi·ªÉu ƒë·ªì N·∫øn (Lu√¥n d√πng d·ªØ li·ªáu chi ti·∫øt h√†ng ng√†y)
                fig.add_trace(go.Candlestick(
                    x=df_filtered['date'],
                    open=df_filtered['open'],
                    high=df_filtered['high'],
                    low=df_filtered['low'],
                    close=df_filtered['close'],
                    name='Gi√°',
                    increasing_line_color='green',
                    decreasing_line_color='red',
                    text=hover_text,
                    hoverinfo="text"

                ))

                # Th√™m Volume
                fig.add_trace(go.Bar(
                    x=df_filtered['date'],
                    y=df_filtered['volume'],
                    name='Volume',
                    marker_color=['green' if c >= o else 'red' for c, o in zip(df_filtered['close'], df_filtered['open'])],
                    opacity=0.5,
                    xaxis='x',
                    yaxis='y2',
                    hovertemplate='<b>Volume:</b> %{y:,.0f}<extra></extra>'
                ))

                # C·∫≠p nh·∫≠t Layout cho N·∫øn & Volume
                fig.update_layout(
                    title=f"Bi·ªÉu ƒë·ªì N·∫øn v√† Volume c·ªï phi·∫øu {symbol} ({time_frame})",
                    xaxis=dict(rangeslider_visible=True, type='date'),
                    yaxis=dict(range=[y_min, y_max], title="Gi√°", domain=[0.3, 1]),
                    yaxis2=dict(title='Volume', domain=[0.0, 0.25], showticklabels=False),
                    template="plotly_dark",
                    height=600
                )

            # --- 4. V·∫º BI·ªÇU ƒê·ªí ƒê∆Ø·ªúNG (LINE CHART) ---
            else:
                fig = go.Figure()
                # Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng - Lu√¥n d√πng d·ªØ li·ªáu chi ti·∫øt h√†ng ng√†y
                fig.add_trace(go.Scatter(
                    x=df_filtered['date'],
                    y=df_filtered['close'],
                    mode='lines',
                    line=dict(color=line_color),  # M√†u ƒë∆∞·ªùng s·∫Ω thay ƒë·ªïi theo gi√°
                    name='Gi√° ƒê√≥ng c·ª≠a',
                    text=hover_text,
                    hoverinfo="text"
                ))

                # C·∫≠p nh·∫≠t Layout cho bi·ªÉu ƒë·ªì ƒê∆∞·ªùng
                fig.update_layout(
                    title=f"Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng {symbol} ({time_frame})",
                    xaxis=dict(type='date'),
                    yaxis=dict(range=[y_min, y_max], title='Gi√°'),
                    template="plotly_dark",
                    height=600
                )

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            st.plotly_chart(fig, use_container_width=True, key=f"chart_{symbol}_{time_frame}_{chart_type}")

            
